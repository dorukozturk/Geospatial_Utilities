- hosts: all
  gather_facts: False
  tasks:
    - name: Ensure python2 is available on ubuntu 16.04 hosts
      raw: sudo bash -c "test -e /usr/bin/python || (apt -qqy update && apt install -qy python-minimal)"

- hosts: tag_ec2_type_master
  tags:
    - nfs
  tasks:
    - name: Get nfs-kernel-server
      apt:
        name: nfs-kernel-server
        update-cache: yes
      become: yes
      become_user: root

    - name: Set up /public
      file:
        state: directory
        path: /public
        owner: ubuntu
        group: ubuntu
      become: yes
      become_user: root

    - name: get vpc_cird
      shell: >-
        curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/$(curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/ 2>/dev/null | head -n 1)vpc-ipv4-cidr-block
      register: vpc_cird_command

    - name: set vpc_cird
      set_fact:
        vpc_cird: "{{ vpc_cird_command.stdout }}"

    - name: update /etc/exports
      lineinfile:
        dest: /etc/exports
        line: "/public {{ vpc_cird }}(rw,sync,no_subtree_check)"
      become: yes
      become_user: root

    - name: restart nfs server
      service:
        name: nfs-kernel-server
        state: restarted
      tags:
        - restart
        - restart_nfs
      become: yes
      become_user: root

    - name: Ensure git is on the master node
      apt:
        name: git
      become: yes
      become_user: root


    # NOTE:  before merging into master branch has to be changed
#    - name: Clone NEX repo
#      git:
#        repo: https://github.com/OpenGeoscience/nex.git
#        dest: /public/nex
#        version: master
#        ssh_opts: "-o StrictHostKeyChecking=no"
#        recursive: no
#        force: yes

    - name: Create .master file with IP for celery app
      shell: >-
        echo {{ ec2_private_ip_address }} > /public/.master


- hosts: tag_ec2_type_node
  tags:
    - nfs
  vars:
    master_hostname: "{{ groups['tag_ec2_type_master'][0] }}"
    master_ip: "{{ hostvars[groups['tag_ec2_type_master'][0]]['ec2_ip_address'] }}"
    master_private_ip: "{{ hostvars[groups['tag_ec2_type_master'][0]]['ec2_private_ip_address'] }}"
  tasks:

    - name: Get nfs-kernel-server
      apt:
        name: nfs-common
        update-cache: yes
      become: yes
      become_user: root

    - name: Set up /public
      file:
        state: directory
        path: /public
        owner: ubuntu
        group: ubuntu
      become: yes
      become_user: root

    - name: Mount /public directory
      mount:
        name: /public
        src: "{{ master_private_ip }}:/public"
        fstype: nfs
        state: mounted
      become: yes
      become_user: root
#
#
# - hosts: tag_ec2_type_master
#   become: yes
#   become_user: root
#   tags:
#     - rabbitmq
#   tasks:
#     - name: Install rabbitmq-server
#       apt:
#         name: rabbitmq-server
#         update-cache: yes
#
#     - name: Allow remote guest users
#       lineinfile:
#         dest: /etc/rabbitmq/rabbitmq.conf
#         line: "[{rabbit, [{loopback_users, []}]}]."
#         create: yes
#
#     - name: Restart rabbitmq-server
#       service:
#         name: rabbitmq-server
#         state: restarted
#       tags:
#         - restart
#         - restart_rabbitmq
#
# - hosts: tag_ec2_type_master
#   become: yes
#   become_user: root
#   tags:
#     - celery
#   tasks:
#     - name: Install celery dependencies
#       apt:
#         name: "{{ item }}"
#         update_cache: yes
#       with_items:
#         - python-dev
#         - python-pip
#
#     - name: Install celery
#       pip:
#         name: celery
#         version: 3.1.20
#
#
# - hosts: tag_ec2_type_node
#   become: yes
#   become_user: root
#   vars:
#     celery_app: gddp_etl
#     celery_dir: /public/nex/experimental/aws_etl
#     celery_user: ubuntu
#     celery_group: ubuntu
#   tags:
#     - celery
#   tasks:
#     - name: Install celery dependencies
#       apt:
#         name: "{{ item }}"
#         update_cache: yes
#       with_items:
#         - python-dev
#         - python-pip
#
#     - name: Install celery
#       pip:
#         name: celery
#         version: 3.1.20
#
#     - name: Install celeryd init script
#       copy:
#         src: celeryd.script
#         dest: /etc/init.d/celeryd
#         mode: 0755
#       tags:
#         - update_celery_configs
#
#     - name: Install celeryd config script
#       template:
#         src: celeryd.conf
#         dest: /etc/default/celeryd
#         mode: 0640
#       tags:
#         - update_celery_configs
#
#     - name: Create log and run directories
#       file:
#         state: directory
#         path: "{{ item }}"
#         owner: ubuntu
#         group: ubuntu
#       with_items:
#         - /var/log/celery
#         - /var/run/celery
#
#     - name: Start celeryd service
#       service:
#         name: celeryd
#         state: restarted
#       tags:
#         - restart
#         - restart_celery
#         - update_celery_configs
